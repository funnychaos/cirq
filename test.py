import matplotlib.pyplot as plt
import numpy as np
import cirq

# gen_loss_history = [-0.5460000038146973, -0.6159999966621399, -0.6660000085830688, -0.7099999785423279, -0.6499999761581421,
#                     -0.722000002861023, -0.7760000228881836, -0.9559999704360962, -0.9300000071525574, -0.9880000352859497,
#                     -1.0019999742507935, -1.1119999885559082, -1.0980000495910645, -1.0920000076293945, -1.2100000381469727,
#                     -1.1660000085830688, -1.2339999675750732, -1.2300000190734863, -1.2060000896453857, -1.1820000410079956,
#                     -1.2239999771118164, -1.1759999990463257, -1.1660000085830688, -1.1679999828338623, -1.1859999895095825,
#                     -1.2200000286102295, -1.190000057220459, -1.187999963760376, -1.2660000324249268, -1.2079999446868896,
#                     -1.194000005722046, -1.2039999961853027, -1.2100000381469727, -1.222000002861023, -1.2480000257492065,
#                     -1.2060000896453857, -1.2400000095367432, -1.2160000801086426, -1.2699999809265137, -1.2639999389648438,
#                     -1.1579999923706055, -1.2319999933242798, -1.2279999256134033, -1.2239999771118164, -1.1660000085830688,
#                     -1.1979999542236328, -1.246000051498413, -1.181999921798706, -1.1679999828338623, -1.1800000667572021,
#                     -1.2179999351501465, -1.2200000286102295, -1.2160000801086426, -1.2300000190734863, -1.2019999027252197,
#                     -1.2599999904632568, -1.2119998931884766, -1.277999997138977, -1.2200000286102295, -1.1699999570846558,
#                     -1.2580000162124634, -1.24399995803833, -1.2380000352859497, -1.24399995803833, -1.253999948501587,
#                     -1.2360000610351562, -1.2319999933242798, -1.2300000190734863, -1.2000000476837158, -1.187999963760376,
#                     -1.2139999866485596, -1.1460000276565552, -1.222000002861023, -1.2060000896453857, -1.2279999256134033,
#                     -1.2339999675750732, -1.1660000085830688, -1.1979999542236328, -1.1959999799728394, -1.2880001068115234, -
#                     1.2660000324249268, -1.2179999351501465, -1.246000051498413, -1.1820000410079956, -1.2179999351501465,
#                     -1.2879999876022339, -1.24399995803833, -1.184000015258789, -1.2019999027252197, -1.1740000247955322,
#                     -1.2519999742507935, -1.2360000610351562, -1.2059999704360962, -1.1779999732971191, -1.2740000486373901,
#                     -1.2060000896453857, -1.247999906539917, -1.2000000476837158, -1.2279999256134033, -1.2400000095367432]
#
# plt.plot(gen_loss_history)
# plt.title("Learning to Control a Qubit")
# plt.xlabel("Iterations")
# plt.ylabel("Error in Control")
# plt.show()




def get_noise_circuit(prob,qubits):
    """
    噪声处理量子线路，由于使用cirq原生的加噪声函数如：cirq.depolarize(p)时，在后面如果使用tfq.convert_to_tensor(circuit)转换格式输入
    到model时，无法实现序列化，转换为对应的string格式输入到model，所以根据去极化噪声对应原理定义此加噪声量子线路。
    函数一开始获取（0,1）之间的平均分布的随机数，将其与输入的prob对比，如果小于此值，表示需要在原有的量子线路基础上增加噪声部分，否则不做任何操作
    :param prob: 定义噪声量子线路加入噪声的概率
    :param circuit: 输入已经初始化后的量子线路
    :return: 噪声线路
    """
    # p = np.random.uniform(0, 1)
    # if p >= prob:
    #     noise_circuit = circuit
    # else:
    #     noise_circuit = circuit + cirq.Circuit(
    #         cirq.X.on_each(*circuit.all_qubits()),
    #         cirq.Y.on_each(*circuit.all_qubits()),
    #         cirq.Z.on_each(*circuit.all_qubits())
    #     )
    noise_circuit = cirq.Circuit(
        cirq.depolarize(prob).on_each(qubits)
    )

    return noise_circuit


qubits = cirq.GridQubit.rect(1,4)
noise_circuit = get_noise_circuit(0.4,qubits)
print(noise_circuit)
